# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_clientlogic', [dirname(__file__)])
        except ImportError:
            import _clientlogic
            return _clientlogic
        if fp is not None:
            try:
                _mod = imp.load_module('_clientlogic', fp, pathname, description)
                imp.reload(_mod)
            finally:
                fp.close()
            return _mod
    _clientlogic = swig_import_helper()
    del swig_import_helper
else:
    import _clientlogic
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class cl_visible_entity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cl_visible_entity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cl_visible_entity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _clientlogic.cl_visible_entity_x_set
    __swig_getmethods__["x"] = _clientlogic.cl_visible_entity_x_get
    if _newclass:x = _swig_property(_clientlogic.cl_visible_entity_x_get, _clientlogic.cl_visible_entity_x_set)
    __swig_setmethods__["y"] = _clientlogic.cl_visible_entity_y_set
    __swig_getmethods__["y"] = _clientlogic.cl_visible_entity_y_get
    if _newclass:y = _swig_property(_clientlogic.cl_visible_entity_y_get, _clientlogic.cl_visible_entity_y_set)
    __swig_setmethods__["z"] = _clientlogic.cl_visible_entity_z_set
    __swig_getmethods__["z"] = _clientlogic.cl_visible_entity_z_get
    if _newclass:z = _swig_property(_clientlogic.cl_visible_entity_z_get, _clientlogic.cl_visible_entity_z_set)
    __swig_setmethods__["tex_mname"] = _clientlogic.cl_visible_entity_tex_mname_set
    __swig_getmethods__["tex_mname"] = _clientlogic.cl_visible_entity_tex_mname_get
    if _newclass:tex_mname = _swig_property(_clientlogic.cl_visible_entity_tex_mname_get, _clientlogic.cl_visible_entity_tex_mname_set)
    __swig_setmethods__["uindex"] = _clientlogic.cl_visible_entity_uindex_set
    __swig_getmethods__["uindex"] = _clientlogic.cl_visible_entity_uindex_get
    if _newclass:uindex = _swig_property(_clientlogic.cl_visible_entity_uindex_get, _clientlogic.cl_visible_entity_uindex_set)
    __swig_setmethods__["vindex"] = _clientlogic.cl_visible_entity_vindex_set
    __swig_getmethods__["vindex"] = _clientlogic.cl_visible_entity_vindex_get
    if _newclass:vindex = _swig_property(_clientlogic.cl_visible_entity_vindex_get, _clientlogic.cl_visible_entity_vindex_set)
    def __init__(self): 
        this = _clientlogic.new_cl_visible_entity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clientlogic.delete_cl_visible_entity
    __del__ = lambda self : None;
cl_visible_entity_swigregister = _clientlogic.cl_visible_entity_swigregister
cl_visible_entity_swigregister(cl_visible_entity)

class cl_initialize_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cl_initialize_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cl_initialize_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["debug_line_output_handler"] = _clientlogic.cl_initialize_params_debug_line_output_handler_set
    __swig_getmethods__["debug_line_output_handler"] = _clientlogic.cl_initialize_params_debug_line_output_handler_get
    if _newclass:debug_line_output_handler = _swig_property(_clientlogic.cl_initialize_params_debug_line_output_handler_get, _clientlogic.cl_initialize_params_debug_line_output_handler_set)
    __swig_setmethods__["chat_output_handler"] = _clientlogic.cl_initialize_params_chat_output_handler_set
    __swig_getmethods__["chat_output_handler"] = _clientlogic.cl_initialize_params_chat_output_handler_get
    if _newclass:chat_output_handler = _swig_property(_clientlogic.cl_initialize_params_chat_output_handler_get, _clientlogic.cl_initialize_params_chat_output_handler_set)
    __swig_setmethods__["game_event_handler"] = _clientlogic.cl_initialize_params_game_event_handler_set
    __swig_getmethods__["game_event_handler"] = _clientlogic.cl_initialize_params_game_event_handler_get
    if _newclass:game_event_handler = _swig_property(_clientlogic.cl_initialize_params_game_event_handler_get, _clientlogic.cl_initialize_params_game_event_handler_set)
    def __init__(self): 
        this = _clientlogic.new_cl_initialize_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _clientlogic.delete_cl_initialize_params
    __del__ = lambda self : None;
cl_initialize_params_swigregister = _clientlogic.cl_initialize_params_swigregister
cl_initialize_params_swigregister(cl_initialize_params)


def cl_initialize_context(*args):
  return _clientlogic.cl_initialize_context(*args)
cl_initialize_context = _clientlogic.cl_initialize_context

def cl_connect_to_server(*args):
  return _clientlogic.cl_connect_to_server(*args)
cl_connect_to_server = _clientlogic.cl_connect_to_server

def cl_enter_world(*args):
  return _clientlogic.cl_enter_world(*args)
cl_enter_world = _clientlogic.cl_enter_world

def cl_start_network_thread():
  return _clientlogic.cl_start_network_thread()
cl_start_network_thread = _clientlogic.cl_start_network_thread

def cl_destroy_context():
  return _clientlogic.cl_destroy_context()
cl_destroy_context = _clientlogic.cl_destroy_context
# This file is compatible with both classic and new-style classes.


